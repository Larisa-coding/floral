import asyncio
import logging
import os
import sys
import django
import threading

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é
STANDALONE_MODE = __name__ == '__main__'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
if STANDALONE_MODE:
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django...")
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_shop.settings')
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Django
    django.setup()
    logger.info("Django —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django (–ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Django, –µ—Å–ª–∏ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ)
from django.conf import settings

# –ò–º–ø–æ—Ä—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

    TELEGRAM_AVAILABLE = True
    logger.info("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
except ImportError as e:
    TELEGRAM_AVAILABLE = False
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É python-telegram-bot: {e}")


    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–∞
    class Update:
        pass


    class ContextTypes:
        DEFAULT_TYPE = None

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
try:
    from users.models import TelegramActivationCode, Profile
    from orders.models import Order

    MODELS_AVAILABLE = True
    logger.info("–ú–æ–¥–µ–ª–∏ Django —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except (ImportError, ModuleNotFoundError) as e:
    MODELS_AVAILABLE = False
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ Django: {e}")


class TelegramBot:
    _instance = None
    _is_running = False
    _application = None
    _token = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(TelegramBot, cls).__new__(cls)
            cls._instance._token = settings.TELEGRAM_BOT_TOKEN
            cls._instance._application = None
        return cls._instance

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
            f"–Ø –±–æ—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞. –ß–µ—Ä–µ–∑ –º–µ–Ω—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n"
            f"–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ."
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/orders - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã\n"
            "/disconnect - –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
            "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ."
        )

    async def orders_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders"""
        chat_id = update.effective_chat.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        try:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ telegram_chat_id, —Ç–∞–∫ –∏ –ø–æ telegram_id
            profile = None
            try:
                profile = Profile.objects.get(telegram_chat_id=str(chat_id))
            except Profile.DoesNotExist:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ telegram_id
                try:
                    profile = Profile.objects.get(telegram_id=chat_id)
                except Profile.DoesNotExist:
                    pass

            if not profile:
                await update.message.reply_text(
                    "–í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É –º–∞–≥–∞–∑–∏–Ω–∞. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è."
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            orders = Order.objects.filter(user=profile.user).order_by('-created_at')[:5]

            if orders:
                response = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n"
                for order in orders:
                    response += f"üì¶ –ó–∞–∫–∞–∑ #{order.order_number}\n"
                    response += f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    response += f"–°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
                    response += f"–°—É–º–º–∞: {order.total} ‚ÇΩ\n\n"

                site_url = getattr(settings, 'SITE_URL', 'http://localhost:8000')
                keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑–∞–º –Ω–∞ —Å–∞–π—Ç–µ", url=f"{site_url}/orders/my-orders/")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(response, reply_markup=reply_markup)
            else:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã orders: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    async def disconnect_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /disconnect"""
        chat_id = update.effective_chat.id

        try:
            profile = Profile.objects.get(telegram_chat_id=str(chat_id))
            username = profile.user.username

            # –û—Ç–≤—è–∑—ã–≤–∞–µ–º Telegram
            profile.telegram_chat_id = None
            profile.telegram_username = None
            profile.save()

            await update.message.reply_text(
                f"–í–∞—à –∞–∫–∫–∞—É–Ω—Ç {username} –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –±–æ—Ç–∞. "
                f"–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö.\n\n"
                f"–ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ —Å–∞–π—Ç–µ."
            )
        except Profile.DoesNotExist:
            await update.message.reply_text("–í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É –º–∞–≥–∞–∑–∏–Ω–∞.")

    async def handle_activation_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        code = update.message.text.strip()
        user = update.effective_user
        chat_id = update.effective_chat.id

        # –î–æ–±–∞–≤–∏—Ç—å —è–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(f"–ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥: {code}...")

        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {code} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (chat_id: {chat_id})")

        # –î–æ–±–∞–≤–∏–º –ø–æ–∏—Å–∫ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            logger.info(f"–ü–æ–∏—Å–∫ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {code} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
            try:
                activation = TelegramActivationCode.objects.get(code=code)
            except TelegramActivationCode.DoesNotExist:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                activation = TelegramActivationCode.objects.filter(code__iexact=code.strip()).first()
                if not activation:
                    raise TelegramActivationCode.DoesNotExist()

            logger.info(f"–ö–æ–¥ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {activation.user.username}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = activation.user.profile
            profile.telegram_chat_id = str(chat_id)
            profile.telegram_username = user.username
            profile.save()
            logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {activation.user.username} –æ–±–Ω–æ–≤–ª–µ–Ω")

            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            activation.delete()
            logger.info(f"–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {code} —É–¥–∞–ª–µ–Ω")

            await update.message.reply_text(
                f"‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É {activation.user.username}!\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤."
            )
        except TelegramActivationCode.DoesNotExist:
            logger.warning(f"–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ—Ñ–∏–ª—è."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ {code}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {update}")

    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        if not TELEGRAM_AVAILABLE:
            logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return False

        if not MODELS_AVAILABLE:
            logger.warning("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False

        # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if self._application:
            logger.info("–ë–æ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True

        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º
            self._application = Application.builder().token(self._token).build()

            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤–∞–∂–µ–Ω!)
            self._application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_activation_code))

            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self._application.add_handler(CommandHandler("start", self.start_command))
            self._application.add_handler(CommandHandler("help", self.help_command))
            self._application.add_handler(CommandHandler("orders", self.orders_command))
            self._application.add_handler(CommandHandler("disconnect", self.disconnect_command))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self._application.add_error_handler(self.error_handler)

            logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞: {e}")
            return False

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if self._application and not TelegramBot._is_running:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –±–æ—Ç –≥–¥–µ-—Ç–æ –µ—â–µ
            try:
                import requests
                response = requests.get(f"https://api.telegram.org/bot{self._token}/getUpdates",
                                        params={"limit": 1, "timeout": 1})
                if response.status_code != 200:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {response.status_code} {response.text}")
                    return False
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞: {e}")

            TelegramBot._is_running = True
            try:
                logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                bot_thread = threading.Thread(target=self._run_bot_polling)
                bot_thread.daemon = True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
                bot_thread.start()
                return True
            except Exception as e:
                TelegramBot._is_running = False
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
                return False
        return False

    def _run_bot_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–ª–∏–Ω–≥ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º event loop –∏–∑ asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(self._application.run_polling(drop_pending_updates=True))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            TelegramBot._is_running = False
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self._application and TelegramBot._is_running:
            try:
                asyncio.run(self._application.stop())
                TelegramBot._is_running = False
                logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
        return False

    @property
    def application(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
        return self._application

    def send_notification(self, chat_id, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

        async def send():
            try:
                await self._application.bot.send_message(chat_id=chat_id, text=message, parse_mode='HTML')
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                return False

        if self._application:
            return asyncio.run(send())
        return False

    def notify_order_status_change(self, order, previous_status):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—å –∏ telegram_chat_id
            if hasattr(order.user, 'profile') and getattr(order.user.profile, 'telegram_chat_id', None):
                chat_id = order.user.profile.telegram_chat_id

                # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                try:
                    from orders.models import Order as OrderModel
                    status_dict = dict(OrderModel.STATUS_CHOICES)
                    prev_status_display = status_dict.get(previous_status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                except Exception:
                    prev_status_display = previous_status

                message = (
                    f"üîî <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                    f"üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ{order.order_number}</b>\n"
                    f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: <b>{order.get_status_display()}</b>\n"
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {prev_status_display}\n\n"
                    f"–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{order.total} ‚ÇΩ</b>\n"
                    f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤! üåπ"
                )

                return self.send_notification(chat_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        return False

    def notify_new_order(self, order):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—å –∏ telegram_chat_id
            if hasattr(order.user, 'profile') and getattr(order.user.profile, 'telegram_chat_id', None):
                chat_id = order.user.profile.telegram_chat_id

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                try:
                    items = order.items.all()
                    items_text = ""
                    for item in items:
                        items_text += f"- {item.product.name} x {item.quantity} = {item.total_price()} ‚ÇΩ\n"
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
                    items_text = "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ\n"

                message = (
                    f"üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
                    f"üì¶ <b>–ó–∞–∫–∞–∑ ‚Ññ{order.order_number}</b>\n\n"
                    f"<b>–¢–æ–≤–∞—Ä—ã:</b>\n{items_text}\n"
                    f"–î–æ—Å—Ç–∞–≤–∫–∞: {order.shipping_cost} ‚ÇΩ\n"
                    f"<b>–ò—Ç–æ–≥–æ: {order.total} ‚ÇΩ</b>\n\n"
                    f"–°—Ç–∞—Ç—É—Å: <b>{order.get_status_display()}</b>\n"
                    f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.\n"
                    f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —Ü–≤–µ—Ç–æ–≤! üåπ"
                )

                return self.send_notification(chat_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: {e}")
        return False

    def send_custom_notification(self, order, message_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ—Ñ–∏–ª—å –∏ telegram_chat_id
            if hasattr(order.user, 'profile') and getattr(order.user.profile, 'telegram_chat_id', None):
                chat_id = order.user.profile.telegram_chat_id

                message = (
                    f"üì¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ ‚Ññ{order.order_number}</b>\n\n"
                    f"{message_text}\n\n"
                    f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–ö–æ–º–∞–Ω–¥–∞ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üåπ"
                )

                return self.send_notification(chat_id, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = TelegramBot()


def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Django"""
    # –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞, –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º
    success = bot.setup()
    if success:
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Django")
    return success


def start_bot_polling():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    if bot.setup():
        return bot.start()
    return False


def stop_bot():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
    return bot.stop()


def send_order_notification(order_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        from orders.models import Order
        order = Order.objects.get(id=order_id)
        return bot.notify_new_order(order)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: {e}")
        return False


def send_status_update_notification(order_id, previous_status=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:
        from orders.models import Order
        order = Order.objects.get(id=order_id)
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
        prev_status = previous_status if previous_status is not None else order.status
        return bot.notify_order_status_change(order, prev_status)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {e}")
        return False


def send_custom_notification(order_id, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É"""
    try:
        from orders.models import Order
        order = Order.objects.get(id=order_id)
        return bot.send_custom_notification(order, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if __name__ == '__main__':
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        if start_bot_polling():
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

            # –ß—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è —Å—Ä–∞–∑—É
            import time

            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                stop_bot()
                logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
        else:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")